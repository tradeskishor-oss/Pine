//@version=5
// Created by digitaljobnews-hash & eatapple990-cmyk
// TBH Pure Supertrend Trailing Logic - Performance Table Fixed + VWAP Strategy
// Current Date and Time (UTC): 2025-01-09 04:25:31
// Current User: eatapple990-cmyk
indicator('Banknifty', overlay=true, max_bars_back=501, max_lines_count=400)

// ═══════════════════════════════════════════════════════════════════════════════════
// STRATEGY ENABLE/DISABLE TOGGLES
// ═══════════════════════════════════════════════════════════════════════════════════

enable_bb_strategy = input.bool(false, title="✅ Enable Bollinger Band Reversal Strategy", group="Strategy Toggles")
enable_breakout_strategy = input.bool(false, title="✅ Enable Breakout Strategy", group="Strategy Toggles")


// TIME SLOT EXCLUSION SETTINGS
enable_time_exclusion = input.bool(false, title="🚫 Enable Time Slot Exclusion", tooltip="Blocks trades during poor performance time slots", group="Strategy Toggles")

// ENHANCED OVERLAP FILTER
enable_overlap_filter = input.bool(true, title="✅ Enable Signal Overlap Filter", tooltip="Prevents multiple strategy signals when any strategy has active trade", group="Strategy Toggles")
enable_315_exit = input.bool(true, title="✅ Enable 3:15 PM Auto Exit", tooltip="Closes all active trades at 3:15 PM and blocks new entries after 3:15 PM", group="Strategy Toggles")

// ═══════════════════════════════════════════════════════════════════════════════════
// BOLLINGER BAND REVERSAL STRATEGY INPUTS - IMPROVED SL LOGIC
// ═══════════════════════════════════════════════════════════════════════════════════

// Bollinger Band Settings
bb_length = input.int(20, title="BB Length", minval=1, group="Bollinger Band Strategy")
bb_std_dev = input.float(1.7, title="BB Standard Deviation", minval=0.1, step=0.1, group="Bollinger Band Strategy")

// Band Stretch Settings
enable_stretch_filter = input.bool(true, title="✅ Enable Band Stretch Filter", group="Bollinger Band Strategy")
min_band_width = input.float(50.0, title="Minimum Band Width (Points)", minval=10.0, maxval=200.0, group="Bollinger Band Strategy")

// Trading Settings
tp_points = input.float(50.0, title="Take Profit Points", minval=10.0, maxval=200.0, group="Bollinger Band Strategy")

// IMPROVED STOP LOSS SETTINGS
bb_sl_type = input.string("Smart SL (Min Risk)", title="Stop Loss Type", options=["Smart SL (Min Risk)", "Candle Based", "Fixed Points"], group="Bollinger Band Strategy")
bb_fixed_sl_points = input.float(30.0, title="Max SL Points (Smart/Fixed)", minval=5.0, maxval=100.0, step=1.0, group="Bollinger Band Strategy", tooltip="For Smart SL: Maximum risk in points. For Fixed SL: Exact risk in points.")
bb_sl_buffer = input.float(2.0, title="Alert Candle SL Buffer", minval=0.0, maxval=10.0, step=0.5, group="Bollinger Band Strategy", tooltip="Extra buffer points added to alert candle high/low")
bb_enable_alerts = input.bool(true, title="Enable BB Alerts", group="Bollinger Band Strategy")

// BB Time Exclusion Settings - 12 slots
bb_exclude_0915_0930 = input.bool(true, title="Exclude 9:15-9:30", group="Bollinger Band Strategy")
bb_exclude_0930_0945 = input.bool(true, title="Exclude 9:30-9:45", group="Bollinger Band Strategy")
bb_exclude_1015_1030 = input.bool(true, title="Exclude 10:15-10:30", group="Bollinger Band Strategy")
bb_exclude_1115_1145 = input.bool(true, title="Exclude 11:15-11:45", group="Bollinger Band Strategy")
bb_exclude_1200_1215 = input.bool(true, title="Exclude 12:00-12:15", group="Bollinger Band Strategy")
bb_exclude_1245_1300 = input.bool(true, title="Exclude 12:45-13:00", group="Bollinger Band Strategy")
bb_exclude_1300_1315 = input.bool(true, title="Exclude 13:00-13:15", group="Bollinger Band Strategy")
bb_exclude_1315_1330 = input.bool(true, title="Exclude 13:15-13:30", group="Bollinger Band Strategy")
bb_exclude_1330_1345 = input.bool(true, title="Exclude 13:30-13:45", group="Bollinger Band Strategy")
bb_exclude_1415_1430 = input.bool(true, title="Exclude 14:15-14:30", group="Bollinger Band Strategy")
bb_exclude_1430_1445 = input.bool(true, title="Exclude 14:30-14:45", group="Bollinger Band Strategy")
bb_exclude_1500_1515 = input.bool(true, title="Exclude 15:00-15:15", group="Bollinger Band Strategy") 

// Display Settings - DEFAULT OFF FOR CLEAN VISUALS
show_bb_lines = input.bool(false, title="Show Bollinger Bands", group="Bollinger Band Strategy")
show_bb_signals = input.bool(true, title="Show BB Entry Signals", group="Bollinger Band Strategy")
show_bb_tp_sl_labels = input.bool(true, title="Show BB TP/SL Hit Labels", group="Bollinger Band Strategy")




// ═════════════════════════════════════════════════════════════════
// NORMAL CANDLE DATA FOR PNL CALCULATION - FOR BREAKOUT STRATEGY
// ═════════════════════════════════════════════════════════════════

// Get the real ticker symbol (non-Heikin Ashi) using the correct method
base_ticker = ticker.new(syminfo.prefix, syminfo.ticker, session=session.regular)

// Fetch normal (real) OHLC data for accurate P&L
normal_close = request.security(base_ticker, timeframe.period, close, lookahead=barmerge.lookahead_off)
normal_high = request.security(base_ticker, timeframe.period, high, lookahead=barmerge.lookahead_off) 
normal_low = request.security(base_ticker, timeframe.period, low, lookahead=barmerge.lookahead_off)
normal_open = request.security(base_ticker, timeframe.period, open, lookahead=barmerge.lookahead_off)


// ═══════════════════════════════════════════════════════════════════════════════════
// BREAKOUT STRATEGY INPUTS
// ═══════════════════════════════════════════════════════════════════════════════════

prd = input.int(7, title="Pivot Period", minval=2, group="Breakout Strategy")
bo_len = input.int(200, title="Max Breakout Length", minval=0, maxval=3000, group="Breakout Strategy")
cwidthu = input.float(6.0, title="Threshold Rate %", minval=1.0, maxval=100.0, group="Breakout Strategy") / 100
mintest = input.int(2, title="Minimum Number of Tests", minval=1, group="Breakout Strategy")
min_points_above_zone = input.float(2.5, title="Min Points Above Zone for BUY", minval=0.5, maxval=20.0, step=0.5, group="Breakout Strategy")
min_points_below_zone = input.float(2.5, title="Min Points Below Zone for SELL", minval=0.5, maxval=20.0, step=0.5, group="Breakout Strategy")

Atr = input.int(defval=5, title='ATR Period', minval=1, maxval=500, group="Breakout Strategy")
Hhv = input.int(defval=10, title='HHV Period', minval=1, maxval=500, group="Breakout Strategy")
Mult = input.float(defval=2.5, title='ATR Multiplier', minval=0.1, step=0.1, group="Breakout Strategy")

// STOP LOSS SETTINGS
breakout_sl_type = input.string("Entry Candle Low", title="Stop Loss Type", options=["Fixed Points", "ATR Trailing", "Entry Candle Low"], group="Breakout Strategy")
breakout_fixed_sl_points = input.float(31.0, title="Fixed SL Points", group="Breakout Strategy")
entry_candle_buffer = input.float(5.0, title="Entry Candle SL Buffer (Points)", minval=0.0, maxval=50.0, group="Breakout Strategy")
auto_tp_time = input.bool(true, title="Auto TP at 3:15 PM", group="Breakout Strategy")

breakout_enable_alerts = input.bool(true, title="Enable Breakout Alerts", group="Breakout Strategy")




// ═══════════════════════════════════════════════════════════════════════════════════
// GLOBAL DISPLAY SETTINGS
// ═══════════════════════════════════════════════════════════════════════════════════

show_performance_table = input.bool(true, title="Show Combined Performance Table", group="Global Display Settings")
table_position = input.string("bottom_right", title="Table Position", options=["top_left", "top_center", "top_right", "middle_left", "middle_center", "middle_right", "bottom_left", "bottom_center", "bottom_right"], group="Global Display Settings")

// User Info - Updated
user_login = input.string("eatapple990-cmyk", title="User Login", group="Global Display Settings")

// ═══════════════════════════════════════════════════════════════════════════════════
// UTILITY FUNCTIONS
// ═══════════════════════════════════════════════════════════════════════════════════

getCurrentTimestamp() =>
    year_str = str.tostring(year(time))
    month_str = str.tostring(month(time), "00")
    day_str = str.tostring(dayofmonth(time), "00")
    hour_str = str.tostring(hour(time), "00")
    minute_str = str.tostring(minute(time), "00")
    second_str = str.tostring(second(time), "00")
    year_str + "-" + month_str + "-" + day_str + " " + hour_str + ":" + minute_str + ":" + second_str

getTablePosition(pos) =>
    switch pos
        "top_left" => position.top_left
        "top_center" => position.top_center
        "top_right" => position.top_right
        "middle_left" => position.middle_left
        "middle_center" => position.middle_center
        "middle_right" => position.middle_right
        "bottom_left" => position.bottom_left
        "bottom_center" => position.bottom_center
        "bottom_right" => position.bottom_right
        => position.bottom_right

calculateWinRate(tpCount, slCount) =>
    totalTrades = tpCount + slCount
    totalTrades > 0 ? math.round((tpCount / totalTrades) * 100, 2) : 0.0

getMonthNameWithYear(monthNum, yearNum) =>
    month_name = switch monthNum
        1 => "January"
        2 => "February"
        3 => "March"
        4 => "April"
        5 => "May"
        6 => "June"
        7 => "July"
        8 => "August"
        9 => "September"
        10 => "October"
        11 => "November"
        12 => "December"
        => "Unknown"
    month_name + " " + str.tostring(yearNum)

// FIXED TIME RESTRICTION FUNCTIONS
isAfter315PM() =>
    if not enable_315_exit
        false
    else
        t = time('1', 'GMT+5:30')
        hour(t) > 15 or (hour(t) == 15 and minute(t) >= 15)

// NEW FUNCTION: Block all entries after 3:15 PM
isEntryBlocked() =>
    isAfter315PM()



// ═══════════════════════════════════════════════════════════════════════════════════
// FIXED PERFORMANCE TRACKING SYSTEM - CORRECTED DATA DISPLAY
// ═══════════════════════════════════════════════════════════════════════════════════

// Combined performance tracking arrays - FIXED INITIALIZATION
var array<int> combined_trade_months = array.new<int>()
var array<int> combined_trade_years = array.new<int>()
var array<bool> combined_trade_was_tp = array.new<bool>()
var array<float> combined_trade_points = array.new<float>()
var array<string> combined_trade_strategy = array.new<string>()

// Combined counters
var int combined_total_tp_count = 0
var int combined_total_sl_count = 0
var float combined_total_tp_points = 0.0
var float combined_total_sl_points = 0.0

// Individual strategy counters for display
var int bb_tp_count = 0
var int bb_sl_count = 0
var int breakout_tp_count = 0
var int breakout_sl_count = 0


// SL Streak tracking
var int current_sl_streak = 0
var int max_sl_streak = 0
var float current_sl_streak_points = 0.0
var float max_sl_streak_points = 0.0

// ENHANCED OVERLAP FILTER TRACKING
var bool any_strategy_active = false
var bool bb_signal_this_bar = false
var bool breakout_signal_this_bar = false


// ═══════════════════════════════════════════════════════════════════════════════════
// BOLLINGER BAND CALCULATIONS WITH IMPROVED SL LOGIC
// ═══════════════════════════════════════════════════════════════════════════════════

// Calculate Bollinger Bands
bb_basis = ta.sma(close, bb_length)
bb_dev = bb_std_dev * ta.stdev(close, bb_length)
bb_upper = bb_basis + bb_dev
bb_lower = bb_basis - bb_dev

// Band width calculation
band_width = bb_upper - bb_lower

// Band stretch condition
is_band_stretched = if enable_stretch_filter
    band_width >= min_band_width
else
    true

// Alert candles based on band position
alert_above_upper = low > bb_upper and is_band_stretched
alert_below_lower = high < bb_lower and is_band_stretched

// Determine candle color for visual purposes
is_green_candle = close > open
is_red_candle = close < open

// Store alert candle information
var float bb_alert_candle_high = na
var float bb_alert_candle_low = na
var bool bb_waiting_for_entry = false
var bool bb_alert_is_above_upper = false
var int bb_alert_bar_index = na

// Update alert candle levels
if alert_above_upper and enable_bb_strategy
    bb_alert_candle_high := high
    bb_alert_candle_low := low
    bb_waiting_for_entry := true
    bb_alert_is_above_upper := true
    bb_alert_bar_index := bar_index

if alert_below_lower and enable_bb_strategy
    bb_alert_candle_high := high
    bb_alert_candle_low := low
    bb_waiting_for_entry := true
    bb_alert_is_above_upper := false
    bb_alert_bar_index := bar_index

// BB Position tracking
var bool bb_in_trade = false
var string bb_trade_type = ""
var float bb_entry_price = na
var float bb_stop_loss = na
var float bb_take_profit = na
var int bb_entry_bar_index = na
var string bb_sl_method = ""

// IMPROVED SL CALCULATION FUNCTION
calculateSmartSL(entryPrice, alertHigh, alertLow, isBuy, maxPoints, buffer) =>
    var float smartSL = na
    var string method = ""
    
    if isBuy
        // For BUY: SL should be below entry
        candleBasedSL = alertLow - buffer
        fixedPointsSL = entryPrice - maxPoints
        
        // Choose whichever gives LESS RISK (higher SL level)
        smartSL := math.max(candleBasedSL, fixedPointsSL)
        
        // Determine which method was used
        if smartSL == candleBasedSL
            method := "Candle (" + str.tostring(smartSL, "#.##") + ")"
        else
            method := "Fixed " + str.tostring(maxPoints) + "pts (" + str.tostring(smartSL, "#.##") + ")"
    else
        // For SELL: SL should be above entry
        candleBasedSL = alertHigh + buffer
        fixedPointsSL = entryPrice + maxPoints
        
        // Choose whichever gives LESS RISK (lower SL level)
        smartSL := math.min(candleBasedSL, fixedPointsSL)
        
        // Determine which method was used
        if smartSL == candleBasedSL
            method := "Candle (" + str.tostring(smartSL, "#.##") + ")"
        else
            method := "Fixed " + str.tostring(maxPoints) + "pts (" + str.tostring(smartSL, "#.##") + ")"
    
    [smartSL, method]

// ═══════════════════════════════════════════════════════════════════════════════════
// BREAKOUT STRATEGY CALCULATIONS
// ═══════════════════════════════════════════════════════════════════════════════════

// ATR Trailing calculation for breakout
Prev = ta.highest(high - Mult * ta.atr(Atr), Hhv)
cum_1 = ta.cum(1)
highest_1 = ta.highest(high - Mult * ta.atr(Atr), Hhv)
highest_2 = ta.highest(high - Mult * ta.atr(Atr), Hhv)
iff_1 = close > highest_1 and close > close[1] ? highest_2 : Prev
TS = cum_1 < 16 ? close : iff_1
iff_2 = close < TS ? color.red : color.black
Color = close > TS ? color.green : iff_2
Buy_ATR = ta.crossover(close, TS)
Sell_ATR = ta.crossunder(close, TS)
is_auto_tp_time = auto_tp_time and hour(time) == 15 and minute(time) == 15

lll = math.max(math.min(bar_index, 300), 1)
h_value = ta.highest(lll)
l_value = ta.lowest(lll)
chwidth = (h_value - l_value) * cwidthu

ph = ta.pivothigh(high, prd, prd)
pl = ta.pivotlow(low, prd, prd)

var phval = array.new_float(0)
var phloc = array.new_int(0)
var plval = array.new_float(0)
var plloc = array.new_int(0)

if not na(ph)
    array.unshift(phval, ph)
    array.unshift(phloc, bar_index - prd)
    if array.size(phval) > 1
        for x = array.size(phloc) - 1 to 1
            if bar_index - array.get(phloc, x) > bo_len
                array.pop(phloc)
                array.pop(phval)
        
if not na(pl)
    array.unshift(plval, pl)
    array.unshift(plloc, bar_index - prd)
    if array.size(plval) > 1
        for x = array.size(plloc) - 1 to 1
            if bar_index - array.get(plloc, x) > bo_len
                array.pop(plloc)
                array.pop(plval)

// Breakout Detection
bullish_breakout_base = false
var float breakout_entry_candle_low = na

hgst_value = ta.highest(prd)[1]

if array.size(phval) >= mintest and normal_close > normal_open and enable_breakout_strategy and not isEntryBlocked()
    if normal_close > hgst_value
        bomax = array.get(phval, 0)
        xx = 0
        for x = 0 to array.size(phval) - 1
            if array.get(phval, x) >= close
                break
            xx := x
            bomax := math.max(bomax, array.get(phval, x))
        if xx >= mintest and open <= bomax
            num = 0
            for x = 0 to xx
                if array.get(phval, x) <= bomax and array.get(phval, x) >= bomax - chwidth
                    num += 1
            if num >= mintest and hgst_value < bomax
                points_above_zone = normal_close - bomax
                if points_above_zone >= min_points_above_zone
                    bullish_breakout_base := true
                    breakout_entry_candle_low := normal_low  // Store normal candle low

bearish_breakdown_base = false
var float breakout_entry_candle_high = na

lwst_value = ta.lowest(prd)[1]

if array.size(plval) >= mintest and normal_close < normal_open and enable_breakout_strategy and not isEntryBlocked()
    if normal_close < lwst_value
        bomin = array.get(plval, 0)
        xx = 0
        for x = 0 to array.size(plval) - 1
            if array.get(plval, x) <= close
                break
            xx := x
            bomin := math.min(bomin, array.get(plval, x))
        if xx >= mintest and open >= bomin
            num1 = 0
            for x = 0 to xx
                if array.get(plval, x) >= bomin and array.get(plval, x) <= bomin + chwidth
                    num1 += 1
            if num1 >= mintest and lwst_value > bomin
                points_below_zone = bomin - normal_close
                if points_below_zone >= min_points_below_zone
                    bearish_breakdown_base := true
                    breakout_entry_candle_high := normal_high  // Store normal candle high
// Breakout Trade Management Variables
var bool breakout_in_trade = false
var string breakout_trade_type = ""
var float breakout_entry_price = na
var float breakout_stop_loss = na
var int breakout_entry_bar_index = na

// Breakout Trade Exit Flags
var bool breakout_tp_hit_alert = false
var bool breakout_sl_hit_alert = false
var bool breakout_auto_tp_hit_alert = false
var bool breakout_315_exit = false
var float breakout_trade_points_tp = 0.0
var float breakout_trade_points_sl = 0.0


// ═══════════════════════════════════════════════════════════════════════════════════
// ENHANCED OVERLAP FILTER LOGIC - NOW WITH 4 STRATEGIES (INCLUDING VWAP)
// ═══════════════════════════════════════════════════════════════════════════════════

// Update active trade status FIRST
any_strategy_active := bb_in_trade or breakout_in_trade 
// Reset overlap tracking at start of each bar
bb_signal_this_bar := false
breakout_signal_this_bar := false


// Base signal conditions (without overlap filtering) - WITH TIME EXCLUSION
bb_sell_base = bb_waiting_for_entry and bb_alert_is_above_upper and close < bb_alert_candle_low and enable_bb_strategy and not isEntryBlocked() 
bb_buy_base = bb_waiting_for_entry and not bb_alert_is_above_upper and close > bb_alert_candle_high and enable_bb_strategy and not isEntryBlocked()

// Check for potential signals
bb_has_signal = (bb_sell_base or bb_buy_base) and enable_bb_strategy
breakout_has_signal = (bullish_breakout_base or bearish_breakdown_base) and enable_breakout_strategy


// Count how many strategies want to signal this bar
signals_count = 0
if bb_has_signal
    signals_count := signals_count + 1
if breakout_has_signal
    signals_count := signals_count + 1


// ENHANCED OVERLAP FILTER CONDITIONS:
// 1. If overlap filter is disabled, allow all signals
// 2. If no active trades, allow all signals (normal overlap filter)
// 3. If ANY strategy has active trade, block ALL new signals
overlap_filter_blocks_all = enable_overlap_filter and any_strategy_active
same_bar_overlap = enable_overlap_filter and signals_count > 1 and not any_strategy_active



// TEST VERSION 20: BB Priority - BB > TBH > Breakout > VWAP
bb_signal_allowed = not overlap_filter_blocks_all and (not same_bar_overlap or (same_bar_overlap and bb_has_signal))
breakout_signal_allowed = not overlap_filter_blocks_all and (not same_bar_overlap or (same_bar_overlap and breakout_has_signal and not bb_has_signal))



// Final signal determination
bullish_breakout = bullish_breakout_base and breakout_signal_allowed
bearish_breakdown = bearish_breakdown_base and breakout_signal_allowed
bb_sell_entry = bb_sell_base and bb_signal_allowed
bb_buy_entry = bb_buy_base and bb_signal_allowed


// Update signal tracking flags
if bullish_breakout or bearish_breakdown
    breakout_signal_this_bar := true
if bb_sell_entry or bb_buy_entry
    bb_signal_this_bar := true


// ═══════════════════════════════════════════════════════════════════════════════════
// TRADE MANAGEMENT AND POSITION UPDATES
// ═══════════════════════════════════════════════════════════════════════════════════

// Generate BB entry signals with IMPROVED SL LOGIC
if bb_sell_entry and not bb_in_trade
    bb_in_trade := true
    bb_trade_type := "SELL"
    bb_entry_price := close
    
    if bb_sl_type == "Smart SL (Min Risk)"
        [sl_level, sl_desc] = calculateSmartSL(bb_entry_price, bb_alert_candle_high, bb_alert_candle_low, false, bb_fixed_sl_points, bb_sl_buffer)
        bb_stop_loss := sl_level
        bb_sl_method := "Smart: " + sl_desc
    else if bb_sl_type == "Candle Based"
        bb_stop_loss := bb_alert_candle_high + bb_sl_buffer
        bb_sl_method := "Candle (" + str.tostring(bb_stop_loss, "#.##") + ")"
    else
        bb_stop_loss := bb_entry_price + bb_fixed_sl_points
        bb_sl_method := "Fixed +" + str.tostring(bb_fixed_sl_points) + " pts"
    
    bb_take_profit := bb_entry_price - tp_points
    bb_entry_bar_index := bar_index
    bb_waiting_for_entry := false

if bb_buy_entry and not bb_in_trade
    bb_in_trade := true
    bb_trade_type := "BUY"
    bb_entry_price := close
    
    if bb_sl_type == "Smart SL (Min Risk)"
        [sl_level, sl_desc] = calculateSmartSL(bb_entry_price, bb_alert_candle_high, bb_alert_candle_low, true, bb_fixed_sl_points, bb_sl_buffer)
        bb_stop_loss := sl_level
        bb_sl_method := "Smart: " + sl_desc
    else if bb_sl_type == "Candle Based"
        bb_stop_loss := bb_alert_candle_low - bb_sl_buffer
        bb_sl_method := "Candle (" + str.tostring(bb_stop_loss, "#.##") + ")"
    else
        bb_stop_loss := bb_entry_price - bb_fixed_sl_points
        bb_sl_method := "Fixed -" + str.tostring(bb_fixed_sl_points) + " pts"
    
    bb_take_profit := bb_entry_price + tp_points
    bb_entry_bar_index := bar_index
    bb_waiting_for_entry := false

// Reset waiting state if no entry after 5 bars
if bb_waiting_for_entry and bar_index > bb_alert_bar_index + 5
    bb_waiting_for_entry := false

if bullish_breakout and not breakout_in_trade
    breakout_in_trade := true
    breakout_trade_type := "BUY"
    breakout_entry_price := normal_close  // Use normal candle for entry
    breakout_entry_bar_index := bar_index
    
    if breakout_sl_type == "Fixed Points"
        breakout_stop_loss := breakout_entry_price - breakout_fixed_sl_points
    else if breakout_sl_type == "ATR Trailing"
        breakout_stop_loss := TS
    else if breakout_sl_type == "Entry Candle Low"
        breakout_stop_loss := normal_low - entry_candle_buffer  // Use normal candle low
    
if bearish_breakdown and not breakout_in_trade
    breakout_in_trade := true
    breakout_trade_type := "SELL"
    breakout_entry_price := normal_close  // Use normal candle for entry
    breakout_entry_bar_index := bar_index
    
    if breakout_sl_type == "Fixed Points"
        breakout_stop_loss := breakout_entry_price + breakout_fixed_sl_points
    else if breakout_sl_type == "ATR Trailing"
        breakout_stop_loss := TS
    else if breakout_sl_type == "Entry Candle Low"
        breakout_stop_loss := normal_high + entry_candle_buffer  // Use normal candle high

// Update ATR trailing SL for breakout
if breakout_in_trade and breakout_sl_type == "ATR Trailing"
    if breakout_trade_type == "BUY"
        if TS > breakout_entry_price
            breakout_stop_loss := TS
    else if breakout_trade_type == "SELL"
        if TS < breakout_entry_price
            breakout_stop_loss := TS



// ═══════════════════════════════════════════════════════════════════════════════════
// TRADE EXIT MANAGEMENT (BB, BREAKOUT & VWAP)
// ═══════════════════════════════════════════════════════════════════════════════════

// BB Trade Management
var bool bb_tp_hit = false
var bool bb_sl_hit = false
var bool bb_315_exit = false
var float bb_trade_points_tp = 0.0
var float bb_trade_points_sl = 0.0

// 3:15 PM Auto Exit for BB
if bb_in_trade and isAfter315PM()
    bb_315_exit := true
    bb_in_trade := false
    if bb_trade_type == "BUY"
        bb_trade_points_tp := close - bb_entry_price
    else
        bb_trade_points_tp := bb_entry_price - close

// Only check TP/SL on candles AFTER entry candle
if bb_in_trade and bar_index > bb_entry_bar_index and not bb_315_exit
    if bb_trade_type == "BUY"
        if low <= bb_stop_loss
            bb_sl_hit := true
            bb_in_trade := false
            bb_trade_points_sl := bb_entry_price - bb_stop_loss
        else if high >= bb_take_profit
            bb_tp_hit := true
            bb_in_trade := false
            bb_trade_points_tp := bb_take_profit - bb_entry_price
    
    if bb_trade_type == "SELL"
        if high >= bb_stop_loss
            bb_sl_hit := true
            bb_in_trade := false
            bb_trade_points_sl := bb_stop_loss - bb_entry_price
        else if low <= bb_take_profit
            bb_tp_hit := true
            bb_in_trade := false
            bb_trade_points_tp := bb_entry_price - bb_take_profit

// 3:15 PM Auto Exit for Breakout
if breakout_in_trade and isAfter315PM()
    breakout_315_exit := true
    breakout_in_trade := false
    breakout_trade_points_tp := breakout_trade_type == "BUY" ? close - breakout_entry_price : breakout_entry_price - close

// Breakout Trade Exit Logic
if breakout_in_trade and bar_index > breakout_entry_bar_index and not breakout_315_exit
    
    // Auto TP at 3:15 PM
    if is_auto_tp_time
        breakout_auto_tp_hit_alert := true
        breakout_in_trade := false
        breakout_trade_points_tp := breakout_trade_type == "BUY" ? close - breakout_entry_price : breakout_entry_price - close
    
    // Regular Exit Logic
    else if breakout_sl_type == "Fixed Points" or breakout_sl_type == "Entry Candle Low"
        if breakout_trade_type == "BUY"
            if normal_low <= breakout_stop_loss
                breakout_sl_hit_alert := true
                breakout_in_trade := false
                breakout_trade_points_sl := breakout_entry_price - breakout_stop_loss
            else if (Buy_ATR or Sell_ATR) and close > breakout_entry_price
                breakout_tp_hit_alert := true
                breakout_in_trade := false
                breakout_trade_points_tp := close - breakout_entry_price
        else if breakout_trade_type == "SELL"
            if normal_high >= breakout_stop_loss
                breakout_sl_hit_alert := true
                breakout_in_trade := false
                breakout_trade_points_sl := breakout_stop_loss - breakout_entry_price
            else if (Buy_ATR or Sell_ATR) and close < breakout_entry_price
                breakout_tp_hit_alert := true
                breakout_in_trade := false
                breakout_trade_points_tp := breakout_entry_price - close
    
    else if breakout_sl_type == "ATR Trailing"
        if breakout_trade_type == "BUY"
            if Buy_ATR or Sell_ATR
                if close > breakout_entry_price
                    breakout_tp_hit_alert := true
                    breakout_in_trade := false
                    breakout_trade_points_tp := close - breakout_entry_price
                else
                    breakout_sl_hit_alert := true
                    breakout_in_trade := false
                    breakout_trade_points_sl := breakout_entry_price - close
        else if breakout_trade_type == "SELL"
            if Buy_ATR or Sell_ATR
                if close < breakout_entry_price
                    breakout_tp_hit_alert := true
                    breakout_in_trade := false
                    breakout_trade_points_tp := breakout_entry_price - close
                else
                    breakout_sl_hit_alert := true
                    breakout_in_trade := false
                    breakout_trade_points_sl := close - breakout_entry_price



// ═══════════════════════════════════════════════════════════════════════════════════
// CORRECTED PERFORMANCE TRACKING FOR BB, BREAKOUT, TBH & VWAP
// ═══════════════════════════════════════════════════════════════════════════════════

// BB Performance Updates
if bb_tp_hit or bb_315_exit
    points_to_add = bb_315_exit ? math.abs(bb_trade_points_tp) : math.abs(bb_trade_points_tp)
    is_tp = bb_315_exit ? (bb_trade_points_tp > 0) : true
    
    array.push(combined_trade_months, month(time))
    array.push(combined_trade_years, year(time))
    array.push(combined_trade_was_tp, is_tp)
    array.push(combined_trade_points, points_to_add)
    array.push(combined_trade_strategy, "BB")
    
    if is_tp
        combined_total_tp_count += 1
        combined_total_tp_points += points_to_add
        bb_tp_count += 1
        current_sl_streak := 0
        current_sl_streak_points := 0.0
    else
        combined_total_sl_count += 1
        combined_total_sl_points += points_to_add
        bb_sl_count += 1
        current_sl_streak += 1
        current_sl_streak_points += points_to_add
        if current_sl_streak > max_sl_streak
            max_sl_streak := current_sl_streak
            max_sl_streak_points := current_sl_streak_points

if bb_sl_hit
    array.push(combined_trade_months, month(time))
    array.push(combined_trade_years, year(time))
    array.push(combined_trade_was_tp, false)
    array.push(combined_trade_points, math.abs(bb_trade_points_sl))
    array.push(combined_trade_strategy, "BB")
    
    combined_total_sl_count += 1
    combined_total_sl_points += math.abs(bb_trade_points_sl)
    bb_sl_count += 1
    current_sl_streak += 1
    current_sl_streak_points += math.abs(bb_trade_points_sl)
    if current_sl_streak > max_sl_streak
        max_sl_streak := current_sl_streak
        max_sl_streak_points := current_sl_streak_points

// Breakout Performance Updates
if breakout_tp_hit_alert or breakout_auto_tp_hit_alert or breakout_315_exit
    points_to_add = breakout_315_exit ? math.abs(breakout_trade_points_tp) : math.abs(breakout_trade_points_tp)
    is_tp = breakout_315_exit ? (breakout_trade_points_tp > 0) : true
    
    array.push(combined_trade_months, month(time))
    array.push(combined_trade_years, year(time))
    array.push(combined_trade_was_tp, is_tp)
    array.push(combined_trade_points, points_to_add)
    array.push(combined_trade_strategy, "BREAKOUT")
    
    if is_tp
        combined_total_tp_count += 1
        combined_total_tp_points += points_to_add
        breakout_tp_count += 1
        current_sl_streak := 0
        current_sl_streak_points := 0.0
    else
        combined_total_sl_count += 1
        combined_total_sl_points += points_to_add
        breakout_sl_count += 1
        current_sl_streak += 1
        current_sl_streak_points += points_to_add
        if current_sl_streak > max_sl_streak
            max_sl_streak := current_sl_streak
            max_sl_streak_points := current_sl_streak_points

if breakout_sl_hit_alert
    array.push(combined_trade_months, month(time))
    array.push(combined_trade_years, year(time))
    array.push(combined_trade_was_tp, false)
    array.push(combined_trade_points, math.abs(breakout_trade_points_sl))
    array.push(combined_trade_strategy, "BREAKOUT")
    
    combined_total_sl_count += 1
    combined_total_sl_points += math.abs(breakout_trade_points_sl)
    breakout_sl_count += 1
    current_sl_streak += 1
    current_sl_streak_points += math.abs(breakout_trade_points_sl)
    if current_sl_streak > max_sl_streak
        max_sl_streak := current_sl_streak
        max_sl_streak_points := current_sl_streak_points


// ═══════════════════════════════════════════════════════════════════════════════════
// ENHANCED PERFORMANCE TABLE - UPDATED WITH VWAP (4 STRATEGIES)
// ═══════════════════════════════════════════════════════════════════════════════════

if barstate.islast and show_performance_table
    current_month = month(time)
    current_year = year(time)
    
    var performanceTable = table.new(getTablePosition(table_position), 15, 15, bgcolor=color.new(color.black, 20), border_width=1)
    
    // Header row with 4 strategies - EXPANDED STRUCTURE
    table.cell(performanceTable, 0, 0, 'Month & Year', text_color=color.white, text_size=size.small, bgcolor=color.new(color.blue, 60))
    table.cell(performanceTable, 1, 0, 'TP Trades', text_color=color.white, text_size=size.small, bgcolor=color.new(color.green, 60))
    table.cell(performanceTable, 2, 0, 'SL Trades', text_color=color.white, text_size=size.small, bgcolor=color.new(color.red, 60))
    table.cell(performanceTable, 3, 0, 'TP Points', text_color=color.white, text_size=size.small, bgcolor=color.new(color.lime, 60))
    table.cell(performanceTable, 4, 0, 'SL Points', text_color=color.white, text_size=size.small, bgcolor=color.new(color.maroon, 60))
    table.cell(performanceTable, 5, 0, 'Net Points', text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 6, 0, 'Win Rate %', text_color=color.white, text_size=size.small, bgcolor=color.new(color.teal, 60))
    table.cell(performanceTable, 7, 0, 'Profit Factor', text_color=color.white, text_size=size.small, bgcolor=color.new(color.aqua, 60))
    table.cell(performanceTable, 8, 0, 'PNL (₹)', text_color=color.white, text_size=size.small, bgcolor=color.new(color.yellow, 60))
    table.cell(performanceTable, 9, 0, 'Max SL Streak', text_color=color.white, text_size=size.small, bgcolor=color.new(color.red, 80))
    table.cell(performanceTable, 10, 0, 'SL Streak Pts', text_color=color.white, text_size=size.small, bgcolor=color.new(color.maroon, 80))
    table.cell(performanceTable, 11, 0, 'BB Trades', text_color=color.white, text_size=size.small, bgcolor=color.new(color.blue, 60))
    table.cell(performanceTable, 13, 0, 'BRK/ATR', text_color=color.white, text_size=size.small, bgcolor=color.new(color.orange, 60))
    table.cell(performanceTable, 14, 0, 'VWAP', text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    
    grand_tp_trades = 0
    grand_sl_trades = 0
    grand_tp_points = 0.0
    grand_sl_points = 0.0
    
    // Display last 12 months
    for i = 0 to 11
        row = i + 1
        
        target_month = ((current_month - 12 + i) % 12)
        if target_month <= 0
            target_month := target_month + 12
        
        target_year = target_month > current_month ? current_year - 1 : current_year
        
        // Count trades for this month/year - FIXED LOGIC
        month_tp_trades = 0
        month_sl_trades = 0
        month_tp_points = 0.0
        month_sl_points = 0.0
        month_bb_trades = 0
      
    
        month_breakout_trades = 0
        
        month_max_sl_streak = 0
        month_sl_streak_points = 0.0
        
        // Track consecutive SLs for this month
        current_month_sl_streak = 0
        current_month_sl_streak_points = 0.0
        month_max_sl_streak_points = 0.0
        
        // Go through all recorded trades - FIXED
        if array.size(combined_trade_months) > 0
            for j = 0 to array.size(combined_trade_months) - 1
                trade_month = array.get(combined_trade_months, j)
                trade_year = array.get(combined_trade_years, j)
                
                if trade_month == target_month and trade_year == target_year
                    was_tp = array.get(combined_trade_was_tp, j)
                    points = array.get(combined_trade_points, j)
                    strategy = array.get(combined_trade_strategy, j)
                    
                    if was_tp
                        month_tp_trades := month_tp_trades + 1
                        month_tp_points := month_tp_points + points
                        // Reset SL streak on TP
                        current_month_sl_streak := 0
                        current_month_sl_streak_points := 0.0
                    else
                        month_sl_trades := month_sl_trades + 1
                        month_sl_points := month_sl_points + points
                        // Continue SL streak
                        current_month_sl_streak := current_month_sl_streak + 1
                        current_month_sl_streak_points := current_month_sl_streak_points + points
                        
                        // Update max streak for this month
                        if current_month_sl_streak > month_max_sl_streak
                            month_max_sl_streak := current_month_sl_streak
                            month_max_sl_streak_points := current_month_sl_streak_points
                    
                    // Count by strategy
                    if strategy == "BB"
                        month_bb_trades := month_bb_trades + 1
                    else if strategy == "BREAKOUT"
                        month_breakout_trades := month_breakout_trades + 1
                    
        
        // Calculations
        net_pts = month_tp_points - month_sl_points
        win_rate = calculateWinRate(month_tp_trades, month_sl_trades)
        profit_factor = month_sl_points > 0 ? math.round(month_tp_points / month_sl_points, 2) : (month_tp_points > 0 ? 999.99 : 0.0)
        option_pts = math.round(net_pts * 0.55)
        pnl = math.round(option_pts * 100)
        
        // Update grand totals
        grand_tp_trades := grand_tp_trades + month_tp_trades
        grand_sl_trades := grand_sl_trades + month_sl_trades
        grand_tp_points := grand_tp_points + month_tp_points
        grand_sl_points := grand_sl_points + month_sl_points
        
        month_name_with_year = getMonthNameWithYear(target_month, target_year)
        
        // Fill table cells - UPDATED STRUCTURE
        table.cell(performanceTable, 0, row, month_name_with_year, text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 1, row, str.tostring(month_tp_trades), text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 2, row, str.tostring(month_sl_trades), text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 3, row, str.tostring(math.round(month_tp_points)), text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 4, row, str.tostring(math.round(month_sl_points)), text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 5, row, str.tostring(math.round(net_pts)), text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 6, row, str.tostring(win_rate) + "%", text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 7, row, str.tostring(profit_factor), text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 8, row, str.tostring(pnl), text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 9, row, str.tostring(month_max_sl_streak), text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 10, row, str.tostring(math.round(month_max_sl_streak_points)), text_color=color.white, text_size=size.small)
        table.cell(performanceTable, 11, row, str.tostring(month_bb_trades), text_color=color.white, text_size=size.small)
        
        table.cell(performanceTable, 13, row, str.tostring(month_breakout_trades), text_color=color.white, text_size=size.small)

    
    // Total row - UPDATED STRUCTURE
    grand_net_pts = grand_tp_points - grand_sl_points
    grand_win_rate = calculateWinRate(grand_tp_trades, grand_sl_trades)
    grand_profit_factor = grand_sl_points > 0 ? math.round(grand_tp_points / grand_sl_points, 2) : (grand_tp_points > 0 ? 999.99 : 0.0)
    grand_option_pts = math.round(grand_net_pts * 0.55)
    grand_pnl = math.round(grand_option_pts * 100)
    
    table.cell(performanceTable, 0, 13, 'TOTAL', text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 1, 13, str.tostring(grand_tp_trades), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 2, 13, str.tostring(grand_sl_trades), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 3, 13, str.tostring(math.round(grand_tp_points)), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 4, 13, str.tostring(math.round(grand_sl_points)), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 5, 13, str.tostring(math.round(grand_net_pts)), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 6, 13, str.tostring(grand_win_rate) + "%", text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 7, 13, str.tostring(grand_profit_factor), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 8, 13, str.tostring(grand_pnl), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 9, 13, str.tostring(max_sl_streak), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 10, 13, str.tostring(math.round(max_sl_streak_points)), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))
    table.cell(performanceTable, 11, 13, str.tostring(bb_tp_count + bb_sl_count), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))

    table.cell(performanceTable, 13, 13, str.tostring((breakout_tp_count + breakout_sl_count)), text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))

    
    // Strategy Summary Row - UPDATED WITH VWAP
    table.cell(performanceTable, 0, 14, 'STRATEGIES', text_color=color.white, text_size=size.small, bgcolor=color.new(color.gray, 60))
    table.cell(performanceTable, 1, 14, 'BB: ' + str.tostring(bb_tp_count) + '/' + str.tostring(bb_sl_count), text_color=color.white, text_size=size.small, bgcolor=color.new(color.blue, 60))
 
    table.cell(performanceTable, 3, 14, 'BRK: ' + str.tostring(breakout_tp_count) + '/' + str.tostring(breakout_sl_count), text_color=color.white, text_size=size.small, bgcolor=color.new(color.orange, 60))
    
    // Enable/Disable Status - UPDATED WITH VWAP
    bb_status = enable_bb_strategy ? "ON" : "OFF"

    breakout_status = enable_breakout_strategy ? "ON" : "OFF"
  
    
    table.cell(performanceTable, 5, 14, bb_status, text_color=color.white, text_size=size.small, bgcolor=enable_bb_strategy ? color.new(color.green, 60) : color.new(color.red, 60))
    table.cell(performanceTable, 7, 14, breakout_status, text_color=color.white, text_size=size.small, bgcolor=enable_breakout_strategy ? color.new(color.green, 60) : color.new(color.red, 60))
    table.cell(performanceTable, 9, 14, user_login, text_color=color.white, text_size=size.small, bgcolor=color.new(color.navy, 60))
    table.cell(performanceTable, 10, 14, 'OVERLAP', text_color=color.white, text_size=size.small, bgcolor=enable_overlap_filter ? color.new(color.green, 60) : color.new(color.red, 60))
    table.cell(performanceTable, 11, 14, '3:15 EXIT', text_color=color.white, text_size=size.small, bgcolor=enable_315_exit ? color.new(color.green, 60) : color.new(color.red, 60))
    table.cell(performanceTable, 12, 14, 'PURE-TRAIL', text_color=color.white, text_size=size.small, bgcolor=color.new(color.purple, 60))

// ═══════════════════════════════════════════════════════════════════════════════════
// ENHANCED STATUS TABLE - UPDATED FOR 4 STRATEGIES INCLUDING VWAP
// ═══════════════════════════════════════════════════════════════════════════════════

var statusTable = table.new(position.top_right, 2, 18, bgcolor=color.new(color.black, 20), border_width=2)
if barstate.islast
    table.cell(statusTable, 0, 0, "Parameter", text_color=color.white, bgcolor=color.new(color.blue, 60))
    table.cell(statusTable, 1, 0, "Value", text_color=color.white, bgcolor=color.new(color.blue, 60))
    
    // Active trades status
    active_trades = ""
    if bb_in_trade
        active_trades := active_trades + "BB:" + bb_trade_type + " "
    if breakout_in_trade
        active_trades := active_trades + "BRK:" + breakout_trade_type + " "

    
    if active_trades == ""
        active_trades := "NONE"
    
    table.cell(statusTable, 0, 1, "Active Trades", text_color=color.white, bgcolor=color.new(color.green, 40))
    table.cell(statusTable, 1, 1, active_trades, text_color=color.white, bgcolor=color.new(color.green, 40))
    
    // Strategy status
    strategies_enabled = ""
    if enable_bb_strategy
        strategies_enabled := strategies_enabled + "BB "
    if enable_breakout_strategy
        strategies_enabled := strategies_enabled + "BRK "


    
    table.cell(statusTable, 0, 2, "Enabled", text_color=color.white, bgcolor=color.new(color.blue, 40))
    table.cell(statusTable, 1, 2, strategies_enabled, text_color=color.white, bgcolor=color.new(color.blue, 40))
    
    // ENHANCED OVERLAP FILTER STATUS
    table.cell(statusTable, 0, 3, "Overlap Filter", text_color=color.white, bgcolor=color.new(color.purple, 40))
    overlap_status = enable_overlap_filter ? "ON" : "OFF"
    table.cell(statusTable, 1, 3, overlap_status, text_color=color.white, bgcolor=enable_overlap_filter ? color.new(color.green, 40) : color.new(color.red, 40))
    
    table.cell(statusTable, 0, 4, "Any Trade Active", text_color=color.white, bgcolor=color.new(color.orange, 40))
    active_status = any_strategy_active ? "YES" : "NO"
    active_color = any_strategy_active ? color.new(color.red, 40) : color.new(color.green, 40)
    table.cell(statusTable, 1, 4, active_status, text_color=color.white, bgcolor=active_color)
    
    table.cell(statusTable, 0, 5, "3:15 Exit", text_color=color.white, bgcolor=color.new(color.orange, 40))
    exit_315_status = enable_315_exit ? "ON" : "OFF"
    table.cell(statusTable, 1, 5, exit_315_status, text_color=color.white, bgcolor=enable_315_exit ? color.new(color.green, 40) : color.new(color.red, 40))
    
    // Signal overlap tracking
    table.cell(statusTable, 0, 6, "Signals Count", text_color=color.white, bgcolor=color.new(color.yellow, 40))
    table.cell(statusTable, 1, 6, str.tostring(signals_count), text_color=color.white, bgcolor=signals_count > 1 ? color.new(color.red, 40) : color.new(color.green, 40))
    
    // Overlap blocking status
    table.cell(statusTable, 0, 7, "Overlap Blocks", text_color=color.white, bgcolor=color.new(color.red, 40))
    blocks_status = overlap_filter_blocks_all ? "YES" : "NO"
    blocks_color = overlap_filter_blocks_all ? color.new(color.red, 40) : color.new(color.green, 40)
    table.cell(statusTable, 1, 7, blocks_status, text_color=color.white, bgcolor=blocks_color)
    


// Plot ACTIVE stop loss levels ONLY when there are active trades
plot(bb_in_trade and enable_bb_strategy ? bb_stop_loss : na, title="BB Stop Loss Level", color=color.red, linewidth=2, style=plot.style_linebr)
plot(breakout_in_trade and enable_breakout_strategy ? breakout_stop_loss : na, title="Breakout Stop Loss Level", color=color.orange, linewidth=2, style=plot.style_linebr)



// Plot entry signals for all strategies
plotshape(bb_sell_entry and show_bb_signals, title='BB Sell Entry', style=shape.labeldown, location=location.abovebar, color=color.red, text='BB\nSELL', textcolor=color.white, size=size.small)
plotshape(bb_buy_entry and show_bb_signals, title='BB Buy Entry', style=shape.labelup, location=location.belowbar, color=color.green, text='BB\nBUY', textcolor=color.white, size=size.small)

plotshape(bullish_breakout, style=shape.labelup, color=color.green, location=location.belowbar, text="BREAKOUT\nBUY", size=size.small)
plotshape(bearish_breakdown, style=shape.labeldown, color=color.red, location=location.abovebar, text="BREAKDOWN\nSELL", size=size.small)





// ENHANCED OVERLAP WARNING SIGNALS
overlap_detected = enable_overlap_filter and signals_count > 1 and not any_strategy_active
active_trade_blocks = enable_overlap_filter and any_strategy_active and (bb_has_signal or breakout_has_signal)

plotshape(overlap_detected, title='Same Bar Multiple Signals', style=shape.xcross, location=location.top, color=color.yellow, text='SAME BAR\nOVERLAP', textcolor=color.black, size=size.small)
plotshape(active_trade_blocks, title='Active Trade Blocks Signal', style=shape.xcross, location=location.bottom, color=color.orange, text='ACTIVE TRADE\nBLOCKS', textcolor=color.white, size=size.small)

// Calculate ATR for proper spacing
atr_value = ta.atr(20) * 2

// BB TP/SL Labels (unchanged)
if show_bb_tp_sl_labels
    if bb_tp_hit or bb_315_exit
        actual_tp_points = bb_315_exit ? math.abs(bb_trade_points_tp) : math.abs(bb_trade_points_tp)
        label_y = bb_trade_type == "BUY" ? high + atr_value : low - atr_value
        label_style = bb_trade_type == "BUY" ? label.style_label_down : label.style_label_up
        label_text = bb_315_exit ? "🕒 BB 3:15 EXIT " : "✅ BB TP +"
        label_text := label_text + str.tostring(math.round(actual_tp_points, 1)) + " pts"
        
        label.new(x=bar_index, y=label_y, text=label_text, 
                  style=label_style, color=color.new(color.green, 0), textcolor=color.white, size=size.small)

    if bb_sl_hit
        actual_sl_points = math.abs(bb_trade_points_sl)
        label_y = bb_trade_type == "BUY" ? low - atr_value : high + atr_value
        label_style = bb_trade_type == "BUY" ? label.style_label_up : label.style_label_down
        label_text = "❌ BB SL -" + str.tostring(math.round(actual_sl_points, 1)) + " pts"
        
        if bb_sl_type == "Smart SL (Min Risk)"
            label_text := label_text + "\n" + bb_sl_method
        
        label.new(x=bar_index, y=label_y, text=label_text, 
                  style=label_style, color=color.new(color.red, 0), textcolor=color.white, size=size.small)

// Breakout TP/SL Labels (unchanged)
if breakout_auto_tp_hit_alert
    actual_auto_tp_points = math.abs(breakout_trade_points_tp)
    label_y = breakout_trade_type == "BUY" ? high + atr_value : low - atr_value
    label_style = breakout_trade_type == "BUY" ? label.style_label_down : label.style_label_up
    
    label.new(x=bar_index, y=label_y, text="🕒 BREAKOUT AUTO TP +" + str.tostring(math.round(actual_auto_tp_points, 1)) + " pts", 
              style=label_style, color=color.new(color.orange, 0), textcolor=color.white, size=size.small)

if breakout_tp_hit_alert
    actual_tp_points = math.abs(breakout_trade_points_tp)
    label_y = breakout_trade_type == "BUY" ? high + atr_value : low - atr_value
    label_style = breakout_trade_type == "BUY" ? label.style_label_down : label.style_label_up
    
    label.new(x=bar_index, y=label_y, text="✅ BREAKOUT TP +" + str.tostring(math.round(actual_tp_points, 1)) + " pts", 
              style=label_style, color=color.new(color.green, 0), textcolor=color.white, size=size.small)

if breakout_sl_hit_alert
    actual_sl_points = math.abs(breakout_trade_points_sl)
    label_y = breakout_trade_type == "BUY" ? low - atr_value : high + atr_value
    label_style = breakout_trade_type == "BUY" ? label.style_label_up : label.style_label_down
    
    label.new(x=bar_index, y=label_y, text="❌ BREAKOUT SL -" + str.tostring(math.round(actual_sl_points, 1)) + " pts", 
              style=label_style, color=color.new(color.red, 0), textcolor=color.white, size=size.small)

if breakout_315_exit
    actual_315_points = math.abs(breakout_trade_points_tp)
    label_y = breakout_trade_type == "BUY" ? high + atr_value : low - atr_value
    label_style = breakout_trade_type == "BUY" ? label.style_label_down : label.style_label_up
    label_text = breakout_trade_points_tp > 0 ? "🕒 BREAKOUT 3:15 TP +" : "🕒 BREAKOUT 3:15 SL -"
    
    label.new(x=bar_index, y=label_y, text=label_text + str.tostring(math.round(actual_315_points, 1)) + " pts", 
              style=label_style, color=color.new(color.orange, 0), textcolor=color.white, size=size.small)


    
    label.new(x=bar_index, y=label_y, text=label_text + str.tostring(math.round(actual_315_points, 1)) + " pts", 
              style=label_style, color=color.new(color.orange, 0), textcolor=color.white, size=size.small)





// Reset flags after processing
if bb_tp_hit
    bb_tp_hit := false
if bb_sl_hit
    bb_sl_hit := false
if bb_315_exit
    bb_315_exit := false
if breakout_tp_hit_alert
    breakout_tp_hit_alert := false
if breakout_sl_hit_alert
    breakout_sl_hit_alert := false
if breakout_auto_tp_hit_alert
    breakout_auto_tp_hit_alert := false
if breakout_315_exit
    breakout_315_exit := false


// Additional visual plots for clean display
// Plot Bollinger Bands only when enabled
plot(show_bb_lines and enable_bb_strategy ? bb_upper : na, title="BB Upper", color=color.blue, linewidth=1)
plot(show_bb_lines and enable_bb_strategy ? bb_lower : na, title="BB Lower", color=color.blue, linewidth=1)
plot(show_bb_lines and enable_bb_strategy ? bb_basis : na, title="BB Basis", color=color.gray, linewidth=1)



// Plot Breakout ATR Trail - Only when active breakout trade or enabled display
show_breakout_trail = (breakout_in_trade) or enable_breakout_strategy
plot(show_breakout_trail and enable_breakout_strategy ? TS : na, color=Color, linewidth=3, title='Breakout ATR Trailing Stoploss')

// ═══════════════════════════════════════════════════════════════════════════════════
// ENHANCED ALERTS SYSTEM - UPDATED FOR 4 STRATEGIES INCLUDING VWAP
// ═══════════════════════════════════════════════════════════════════════════════════

// BB Alerts (unchanged)
if bb_enable_alerts and enable_bb_strategy
    if alert_above_upper
        alert("BB ALERT ABOVE UPPER BAND: Waiting for reversal SELL entry below " + str.tostring(bb_alert_candle_low, "#.##") + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)
    
    if alert_below_lower
        alert("BB ALERT BELOW LOWER BAND: Waiting for reversal BUY entry above " + str.tostring(bb_alert_candle_high, "#.##") + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)
    
    if bb_sell_entry
        risk_points = bb_entry_price - bb_stop_loss
        alert("BB SELL ENTRY: " + str.tostring(close, "#.##") + " | SL: " + str.tostring(bb_stop_loss, "#.##") + " | Risk: " + str.tostring(math.round(risk_points, 1)) + "pts | Method: " + bb_sl_method + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)
    
    if bb_buy_entry
        risk_points = bb_stop_loss - bb_entry_price
        alert("BB BUY ENTRY: " + str.tostring(close, "#.##") + " | SL: " + str.tostring(bb_stop_loss, "#.##") + " | Risk: " + str.tostring(math.round(risk_points, 1)) + "pts | Method: " + bb_sl_method + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)
    
    if bb_tp_hit
        alert("BB TAKE PROFIT HIT: +" + str.tostring(math.abs(bb_trade_points_tp), "#.##") + " points profit | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)
    
    if bb_sl_hit
        alert("BB STOP LOSS HIT: -" + str.tostring(math.abs(bb_trade_points_sl), "#.##") + " points loss | Method: " + bb_sl_method + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)
    
    if bb_315_exit
        result_msg = bb_trade_points_tp > 0 ? "profit" : "loss"
        alert("BB 3:15 PM AUTO EXIT: " + str.tostring(math.abs(bb_trade_points_tp), "#.##") + " points " + result_msg + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)

// Breakout Alerts (unchanged)
if breakout_enable_alerts and enable_breakout_strategy
    if bullish_breakout
        alert("BREAKOUT BUY SIGNAL: Position opened at " + str.tostring(close, "#.##") + " | SL: " + str.tostring(breakout_stop_loss, "#.##") + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)
    
    if bearish_breakdown
        alert("BREAKOUT SELL SIGNAL: Position opened at " + str.tostring(close, "#.##") + " | SL: " + str.tostring(breakout_stop_loss, "#.##") + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)
    
    if breakout_tp_hit_alert or breakout_auto_tp_hit_alert
        alert("BREAKOUT TAKE PROFIT: Position closed with profit at " + str.tostring(close, "#.##") + " | Points: +" + str.tostring(math.abs(breakout_trade_points_tp), "#.##") + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)
    
    if breakout_sl_hit_alert
        alert("BREAKOUT STOP LOSS: Position closed with loss at " + str.tostring(close, "#.##") + " | Points: -" + str.tostring(math.abs(breakout_trade_points_sl), "#.##") + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)
    
    if breakout_315_exit
        result_msg = breakout_trade_points_tp > 0 ? "profit" : "loss"
        alert("BREAKOUT 3:15 PM AUTO EXIT: " + str.tostring(math.abs(breakout_trade_points_tp), "#.##") + " points " + result_msg + " | Time: " + getCurrentTimestamp(), alert.freq_once_per_bar)


   




// Alert Conditions for all 4 strategies
alertcondition(alert_above_upper and enable_bb_strategy, 'BB Alert Above Upper Band', 'BB Alert Candle Above Upper Band')
alertcondition(alert_below_lower and enable_bb_strategy, 'BB Alert Below Lower Band', 'BB Alert Candle Below Lower Band')
alertcondition(bb_sell_entry, 'BB Sell Entry Signal', 'BB Reversal SELL Entry')
alertcondition(bb_buy_entry, 'BB Buy Entry Signal', 'BB Reversal BUY Entry')
alertcondition(bb_tp_hit, 'BB Take Profit Hit', 'BB Take Profit Hit')
alertcondition(bb_sl_hit, 'BB Stop Loss Hit', 'BB Stop Loss Hit')

alertcondition(bullish_breakout, 'Breakout Buy Signal', 'Breakout Buy Signal Triggered')
alertcondition(bearish_breakdown, 'Breakout Sell Signal', 'Breakout Sell Signal Triggered')
alertcondition(breakout_tp_hit_alert or breakout_auto_tp_hit_alert, 'Breakout Take Profit', 'Breakout Take Profit Hit')
alertcondition(breakout_sl_hit_alert, 'Breakout Stop Loss', 'Breakout Stop Loss Hit')


alertcondition(overlap_detected, 'Same Bar Overlap Filter', 'Multiple Strategy Signals Same Bar')
alertcondition(active_trade_blocks, 'Active Trade Blocks Signal', 'New Signal Blocked by Active Trade')
alertcondition(isEntryBlocked() and (bb_has_signal or breakout_has_signal), 'Entry Blocked After 3:15 PM', 'New Entry Attempted After 3:15 PM')

// Background highlighting for various conditions
bgcolor(alert_above_upper and enable_bb_strategy ? color.new(color.orange, 90) : na, title="BB Alert Above Upper")
bgcolor(alert_below_lower and enable_bb_strategy ? color.new(color.purple, 90) : na, title="BB Alert Below Lower")
bgcolor(overlap_detected ? color.new(color.yellow, 85) : na, title="Same Bar Overlap")
bgcolor(active_trade_blocks ? color.new(color.orange, 85) : na, title="Active Trade Blocks Signal")
bgcolor(isEntryBlocked() ? color.new(color.gray, 90) : na, title="Entries Blocked After 3:15 PM")






